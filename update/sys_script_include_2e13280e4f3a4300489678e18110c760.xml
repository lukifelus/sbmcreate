<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_138181_sbmcreate.RelatedAlerts</api_name>
        <client_callable>true</client_callable>
        <description>Class used for Client Scripts to call and trigger a JDBC query on the related alerts database</description>
        <name>RelatedAlerts</name>
        <script><![CDATA[var RelatedAlerts = Class.create();

RelatedAlerts.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

executeQuery:function(){
	var timeout = 10;
	
	//Database Information
	var driver = "com.mysql.jdbc.driver";
	var dbServer = "mysql.myserver.com";
	var dbPort = "3306";
	var database = "snctestdb";
	var dbUser = "snctester";
	var dbPassword = "sncrocks";
	var connectionString = "jdbc:mysql://"+dbServer+":"+dbPort+"/"+database+"?user="+dbUser+"&"+"amp;password="+dbPassword;

  //ECC Queue Information
  var midServer = "MID_MAIN1";
 
  var incNumber = this.getParameter('sysparm_incident_number'); //This comes from the UI Action client script
  var sqlQuery = "SELECT incidentNum,alarmID,severity,node,ipaddress,summary,first,last,tally FROM related_alerts WHERE incidentNum='"+incNumber+"'";
 
  gs.log("incNumber: " + incNumber);

  var xml = this._getQueryXML(driver, connectionString, sqlQuery);

  var eccQueueId = this._postQueryToEccQueue(midServer, xml);

  var eccResponse = this._waitForQueryResponse(eccQueueId, timeout);
 
  if(!eccResponse.sys_id){
    eccQueueId = 0;
  } else {
    var eccResultRecord = this._getResultRecordFromQueue(eccResponse, eccQueueId);
    this._insertResultsIntoCacheTable(eccResultRecord, eccQueueId);
  }
  return eccQueueId;
},
_getQueryXML:function(driver, connectionString, sqlQuery){
  var xml = '<?xml version="1.0" encoding="UTF-8"?>';
  xml = '<parameters>';
  xml += '<parameter name="jdbc_driver" value="'+driver+'"/>';
  xml += '<parameter name="connection_string" value="'+connectionString+'"/>';
  xml += '<parameter name="query" value="Specific SQL"/>';
  xml += '<parameter name="sql_statement" value="'+sqlQuery+'"/>';
  xml += '</parameters>';
  return xml;
},
_postQueryToEccQueue:function(midServer, xml){
  var ecc = new GlideRecord("ecc_queue");
  ecc.initialize();
  ecc.agent="mid.server." + midServer;
  ecc.topic="JDBCProbe";
  ecc.payload=xml;
  ecc.queue="output";
  ecc.state="ready";
  ecc.sequence = Packages.com.glide.util.Counter.next('ecc:sequence');
  ecc.insert();

  gs.log("JDBC Query ECC Queue New Sysid: " + ecc.sys_id);
  return ecc.sys_id;
},
_waitForQueryResponse:function(eccQueueId, timeout){
  var resp = new GlideRecord("ecc_queue");
  resp.addQuery("response_to", eccQueueId);
  resp.addQuery("queue", "input");
 
  var counter = 0;
  do{
    resp.query();
    resp.next();
    gs.sleep(1000); //wait a second before trying again
    counter ++;
  } while(!resp.sys_id && counter < timeout);
  return resp;
},
_getResultRecordFromQueue:function(eccResponse, eccQueueId){
  gs.log("Resp Sys ID: " + eccResponse.sys_id);
  gs.log("Response Payload: " + eccResponse.payload.replace(/\</g, "&" + "lt;"));
 
  var eccRes = new GlideRecord("ecc_queue");
  eccRes.addQuery("agent", "JDBCProbeResult");
  eccRes.addQuery("topic", "JDBCProbe");
  eccRes.addQuery("queue", "input");
  eccRes.addQuery("state", "ready");
  eccRes.orderByDesc("sys_created_on");
  eccRes.query();
  while(eccRes.next()){
    var payload = new XMLDocument(eccRes.payload);
    var eccQuery = payload.getNodeText("//results/parameters/parameter[@name=ecc_queue]/@value");
    gs.log("eccQuery: " + eccQuery);
    gs.log(eccQueueId + "==" + eccQuery);
    if( eccQueueId == eccQuery ){
      break;
    }
  }
  return eccRes;
},
_insertResultsIntoCacheTable:function(eccResultRecord, eccQueueId){
  gs.log("Inserting " + eccResultRecord.name + " Results into Cache Table");
  var payload = new XMLDocument(eccResultRecord.payload);
  gs.log("Payload to Insert: " + payload);
  for(var i=1; i<=eccResultRecord.name; i++){
    var rec = new GlideRecord("u_related_alert_cache");
    var xpath = "//results/result/row[@id='" + i + "']/";
    rec.initialize();
    rec.u_incidentnum = payload.getNodeText(xpath + "incidentNum");
    gs.log("IncidentNumber From database: " +  payload.getNodeText(xpath + "incidentNum"));
    rec.u_ecc_id = eccQueueId;
    rec.u_alarmid = payload.getNodeText(xpath + "alarmID");
    rec.u_severity = payload.getNodeText(xpath + "severity");
    rec.u_node = payload.getNodeText(xpath + "node");
    rec.u_ipaddress = payload.getNodeText(xpath + "ipaddress");
    rec.u_summary = payload.getNodeText(xpath + "summary");
    rec.u_first = payload.getNodeText(xpath + "first");
    rec.u_last = payload.getNodeText(xpath + "last");
    rec.u_tally = payload.getNodeText(xpath + "tally");
   
    rec.insert();
  }
}
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-04 03:34:12</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>2e13280e4f3a4300489678e18110c760</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>RelatedAlerts</sys_name>
        <sys_package display_value="SBMcreate" source="x_138181_sbmcreate">8c098a014f320300489678e18110c751</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SBMcreate">8c098a014f320300489678e18110c751</sys_scope>
        <sys_update_name>sys_script_include_2e13280e4f3a4300489678e18110c760</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-04 03:34:12</sys_updated_on>
    </sys_script_include>
</record_update>
